package tokyo.peya.obfuscator.ui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;
import org.fife.ui.rsyntaxtextarea.Theme;
import tokyo.peya.obfuscator.Localisation;
import tokyo.peya.obfuscator.configuration.values.StringValue;

import java.awt.Frame;
import java.awt.Insets;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.io.InputStream;

public class MultiLineInput extends JDialog
{
    private JPanel contentPane;
    private RSyntaxTextArea textArea;

    public MultiLineInput(Frame owner, StringValue stringContainer)
    {
        super(owner, Localisation.access("ui.multi_line.editing").set("containerName", stringContainer.getName()).get());
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setContentPane(this.contentPane);
        setModal(true);
        setSize(500, 600);
        setLocationRelativeTo(owner);

        try (InputStream is = GUI.class.getResourceAsStream("/theme.xml"))
        {
            Theme.load(is).apply(this.textArea);
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }

        this.textArea.setText(stringContainer.get());
        this.addWindowListener(new WindowAdapter()
        {
            @Override
            public void windowClosed(WindowEvent e)
            {
                stringContainer.setValue(MultiLineInput.this.textArea.getText());
                super.windowClosed(e);
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$()
    {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(1, 1, new Insets(10, 10, 10, 10), -1, -1));
        contentPane.setAlignmentX(0.0f);
        contentPane.setAlignmentY(0.0f);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.setAlignmentX(0.0f);
        panel1.setAlignmentY(0.0f);
        contentPane.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        scrollPane1.setAlignmentX(0.0f);
        scrollPane1.setAlignmentY(0.0f);
        panel1.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        textArea = new RSyntaxTextArea();
        textArea.setEOLMarkersVisible(false);
        textArea.setAlignmentX(0.0f);
        textArea.setAlignmentY(0.0f);
        textArea.setCloseCurlyBraces(false);
        textArea.setCloseMarkupTags(false);
        textArea.setLineWrap(true);
        scrollPane1.setViewportView(textArea);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$()
    {
        return contentPane;
    }

}
